buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "gradle.plugin.com.zoltu.gradle.plugin:git-versioning:2.0.1"
		classpath "se.bjurr.gitchangelog:git-changelog-gradle-plugin:1.20"
	}
}

apply plugin: "com.zoltu.git-versioning"

apply plugin: "se.bjurr.gitchangelog.git-changelog-gradle-plugin"

task ChangeLog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
        filePath = "build/CHANGELOG.md";
}

apply plugin: 'java'
apply plugin: 'eclipse'

compileJava {
	sourceCompatibility = '1.8'
}

import org.gradle.internal.os.OperatingSystem;

task Bless(type:Exec) {
	if (OperatingSystem.current().isLinux()) {
		commandLine './Bless.sh'
		ext.blessDir = 'build/blessed/main/src/java'
	} else {
		ext.blessDir = 'main/src/java'
	}
}

sourceSets {
	main {
		java {
			srcDir 'main/src/java'
		}
		resources {
			srcDir 'main/res'
			include '**/*'
			srcDir 'main/src/java'
			exclude '**/*.java'
		}
	}
// TODO: Currently test only works with eclipse
//	test {
//		java {
//			srcDir 'test/src/java'
//		}
//		resources {
//			srcDir 'test/res'
//		}
//	}
}

repositories {
	mavenCentral()
}

dependencies {
	compile 'com.google.code.gson:gson:2.3.1'
	compile 'javax.mail:mail:1.4.7'
	compile 'org.slf4j:jul-to-slf4j:1.7.13'
	compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.5'
	compile 'com.googlecode.mobilityrpc:mobility-rpc:1.2.0'
}

allprojects {
	tasks.withType(Javadoc) {
		options.addStringOption('Xdoclint:none', '-quiet')
		options.addStringOption('tag', 'note:a:"Note:"')
	}
}

javadoc {
	source = sourceSets.main.allJava
	classpath = configurations.compile
}

jar {
	dependsOn ChangeLog
	from ChangeLog.filePath
}

task sourcesJar(type: Jar, dependsOn: [classes,ChangeLog,Bless]) {
	classifier = 'sources'
	FileTree srctree = fileTree(Bless.blessDir){
		include '**/*.java'
	}
	from srctree, ChangeLog.filePath
}

task javadocJar(type: Jar, dependsOn: [javadoc,ChangeLog]) {
	classifier = 'javadoc'
	from javadoc.destinationDir, ChangeLog.filePath
}

artifacts {
	archives sourcesJar
	archives javadocJar
}
