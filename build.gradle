buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "gradle.plugin.com.zoltu.gradle.plugin:git-versioning:2.0.19"
		classpath "se.bjurr.gitchangelog:git-changelog-gradle-plugin:1.20"
		classpath 'org.ajoberstar:gradle-git:1.4.2'
	}
}

apply plugin: "se.bjurr.gitchangelog.git-changelog-gradle-plugin"

import org.ajoberstar.grgit.*

task ChangeLog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
	filePath = "build/CHANGELOG.md";
	
	def repo = Grgit.open(project.file('.'))
	toRef = repo.branch.getCurrent().fullName
}

apply plugin: "com.zoltu.git-versioning"

apply plugin: 'java'
apply plugin: 'eclipse'

compileJava {
	sourceCompatibility = '1.8'
}

import org.gradle.internal.os.OperatingSystem;

task Bless(type:Exec) {
	if (OperatingSystem.current().isLinux() || OperatingSystem.current().isMacOsX()) {
		commandLine 'bash', 'Bless/Bless.sh'
		ext.blessDir = 'build/blessed/main/src/java'
	} else if (OperatingSystem.current().isWindows()) {
		// Bless script does not support Windows (at least not "natively")
		commandLine 'cmd', '/c', 'echo'
		println '! Blessed source generation disabled on Windows'
		ext.blessDir = 'main/src/java'
	} else {
		ChangeLog.commandLine 'echo'
		println '! Blessed source generation is not supported on this platform'
		ext.blessDir = 'main/src/java'
	}
}

import org.apache.tools.ant.filters.ReplaceTokens

task GenClean(type: Delete) {
	delete 'build/gen/src'
}

task NSGen(type: Copy, dependsOn: GenClean) {
	from 'main/src/java'
	into 'build/gen/src'
	include '**/_Namespace.java'

	def date = new Date()
	filter(ReplaceTokens, tokens: [ 'VERSION': project.version,
					'DATE': date.format('yyyy-MM-dd'),
					'TIME': date.format('HH:mm:ss') ])
}

sourceSets {
	main {
		java {
			srcDirs = [ 'main/src/java' ]
			excludes = [ '**/_Namespace.java' ]
		}
		resources {
			srcDirs = [ 'main/res', 'main/src/java' ]
			excludes = [ '**/*.java' ]
		}
	}
// TODO: Currently test only works with eclipse
//	test {
//		java {
//			srcDirs = [ 'test/src/java' ]
//		}
//		resources {
//			srcDirs = [ 'test/res' ]
//		}
//	}
}

compileJava {
	source NSGen.outputs.files
}

repositories {
	mavenCentral()
}

dependencies {
	compile 'com.google.code.gson:gson:2.3.1'
	compile 'javax.mail:mail:1.4.7'
	compile 'org.slf4j:jul-to-slf4j:1.7.13'
	compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.5'
	compile 'com.googlecode.mobilityrpc:mobility-rpc:1.2.1'
}

allprojects {
	tasks.withType(Javadoc) {
		options.addStringOption('Xdoclint:none', '-quiet')
		options.addStringOption('tag', 'note:a:"Note:"')
	}
}

javadoc {
	source = sourceSets.main.allJava
	classpath = configurations.compile
}

jar {
	dependsOn ChangeLog
	from ChangeLog.filePath
}

task sourcesJar(type: Jar, dependsOn: [classes,ChangeLog,Bless]) {
	classifier = 'sources'
	FileTree srctree = fileTree(Bless.blessDir){
		include '**/*.java'
	}
	from srctree, ChangeLog.filePath
}

task javadocJar(type: Jar, dependsOn: [javadoc,ChangeLog]) {
	classifier = 'javadoc'
	from javadoc.destinationDir, ChangeLog.filePath
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

// Publishing to internal repository
apply plugin: 'maven'

configurations {
	deployerJars
}

dependencies {
	deployerJars "org.apache.maven.wagon:wagon-http:2.10"
}

task Config_uploadArchives << {
	def MavenPub = System.getenv("MAVENPUB_URL");
	if (MavenPub == null)
		throw new GradleException('MAVENPUB_URL is undefined')
	def MavenPubUser = System.getenv("MAVENPUB_USER");
	if (MavenPubUser == null)
		throw new GradleException('MAVENPUB_USER is undefined')
	def MavenPubPass = System.getenv("MAVENPUB_PASS");
	if (MavenPubPass == null)
		throw new GradleException('MAVENPUB_PASS is undefined')

	uploadArchives.repositories.mavenDeployer {
		repository(url: MavenPub) {
			authentication(userName: MavenPubUser, password: MavenPubPass)
		}
	}
}

uploadArchives {
	dependsOn Config_uploadArchives

	repositories.mavenDeployer {
		configuration = configurations.deployerJars
		pom.groupId = "com.necla.am"
	}
}
