buildscript {
	repositories {
		maven {
			url System.getenv("MAVENSRC_URL") ?: "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "gradle.plugin.com.zoltu.gradle.plugin:git-versioning:2.0.19"
	}
}

apply plugin: "com.zoltu.git-versioning"

apply plugin: 'java'
apply plugin: 'eclipse'

compileJava {
	sourceCompatibility = '1.8'
	options.encoding = 'UTF-8'
}

import org.apache.tools.ant.filters.ReplaceTokens

task GenClean(type: Delete) {
	delete 'build/gen/src'
}

task NSGen(type: Copy, dependsOn: GenClean) {
	from 'src/java'
	into 'build/gen/src'
	include '**/_Namespace.java'

	def date = new Date()
	filter(ReplaceTokens, tokens: [ 'VERSION': project.version,
					'DATE': date.format('yyyy-MM-dd'),
					'TIME': date.format('HH:mm:ss') ])
}

sourceSets {
	main {
		java {
			srcDirs = [ 'src/java' ]
			excludes = [ '**/_Namespace.java' ]
		}
		resources {
			srcDirs = [ 'res', 'src/java' ]
			excludes = [ '**/*.java' ]
		}
	}
}

compileJava {
	source NSGen.outputs.files
}

repositories {
	maven {
		url System.getenv("MAVENSRC_URL") ?: "https://repo.maven.apache.org/maven2/"
	}
}

configurations.all {
	resolutionStrategy.cacheDynamicVersionsFor 60, 'seconds'
	resolutionStrategy.cacheChangingModulesFor 60, 'seconds'
}

dependencies {
	compile 'com.necla.am:ZWUtils-Java:1.1.+'
	compile 'org.scala-lang:scala-compiler:2.12.1'
	compile 'org.scala-lang:scala-reflect:2.12.1'
	compile 'org.scala-lang:scala-library:2.12.1'
}

allprojects {
	tasks.withType(Javadoc) {
		options.addStringOption('Xdoclint:none', '-quiet')
		options.addStringOption('tag', 'note:a:"Note:"')
	}
	tasks.withType(Jar) {
        baseName = "ZWUtils-Addon-ObjectTrap-$project.name"
    }
}

javadoc {
	source = sourceSets.main.allJava
	classpath = configurations.compile
}

task sourcesJar(type: Jar, dependsOn: [classes]) {
	classifier = 'sources'
	from sourceSets.main.java
}

task javadocJar(type: Jar, dependsOn: [javadoc]) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

// Publishing to internal repository
apply plugin: 'maven'

configurations {
	deployerJars
}

dependencies {
	deployerJars "org.apache.maven.wagon:wagon-http:2.10"
}

task Config_uploadArchives {
	doLast {
		def MavenPub = System.getenv("MAVENPUB_URL");
		if (MavenPub == null)
			throw new GradleException('MAVENPUB_URL is undefined')
		def MavenPubUser = System.getenv("MAVENPUB_USER");
		if (MavenPubUser == null)
			throw new GradleException('MAVENPUB_USER is undefined')
		def MavenPubPass = System.getenv("MAVENPUB_PASS");
		if (MavenPubPass == null)
			throw new GradleException('MAVENPUB_PASS is undefined')

		uploadArchives.repositories.mavenDeployer {
			repository(url: MavenPub) {
				authentication(userName: MavenPubUser, password: MavenPubPass)
			}
		}
	}
}

uploadArchives {
	dependsOn Config_uploadArchives

	repositories.mavenDeployer {
		configuration = configurations.deployerJars
		pom.groupId = "com.necla.am"
	}
}
